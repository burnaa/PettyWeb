import "./my-cart.js"
class MainProduct extends HTMLElement {
    constructor() {
        super();
        this.id = null; // –ê–Ω—Ö–Ω–∞–∞—Å–∞–∞ ID –±–∞–π—Ö–≥“Ø–π
    }

        // –≠–Ω—ç –∞—Ç—Ç—Ä–∏–±—É—Ç ”©”©—Ä—á–ª”©–≥–¥”©—Ö “Ø–µ–¥ 'attributeChangedCallback' –∞–∂–∏–ª–ª–∞–Ω–∞
        static get observedAttributes() {
            return ['product-id']; // product-id –∞—Ç—Ç—Ä–∏–±—É—Ç—ã–≥ –∞–∂–∏–≥–ª–∞—Ö
        }
    
        // –ê—Ç—Ç—Ä–∏–±—É—Ç ”©”©—Ä—á–ª”©–≥–¥”©—Ö “Ø–µ–¥ –∞–∂–∏–ª–ª–∞—Ö —Ñ—É–Ω–∫—Ü
        attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'product-id' && oldValue !== newValue) {
                console.log(`Product ID changed from ${oldValue} to ${newValue}`);
                this.fetchProductData(newValue); // –®–∏–Ω—ç ID-–≥–∞–∞—Ä ”©–≥”©–≥–¥”©–ª —Ç–∞—Ç–∞—Ö
            }
        }

    // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π ID-–≥ –∞—à–∏–≥–ª–∞–Ω —Å–µ—Ä–≤–µ—Ä—ç—ç—Å ”©–≥”©–≥–¥”©–ª —Ç–∞—Ç–∞–∂ –∞–≤–∞—Ö
    async fetchProductData(productId) {
        try {
            const response = await fetch(`http://localhost:3000/products/${productId}`);
            if (response.ok) {
                const prod = await response.json();
                if (!prod) {
                    throw new Error("–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π ”©–≥”©–≥–¥”©–ª —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞!");
                }
                this.initializeProduct(prod);
            } else {
                console.error('–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', response.status);
                this.innerHTML = `<p>–ê–ª–¥–∞–∞: –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.</p>`;
            }
        } catch (error) {
            console.error('–ê–ª–¥–∞–∞:', error);
            this.innerHTML = `<p>–ê–ª–¥–∞–∞: –°–µ—Ä–≤–µ—Ä—Ç—ç–π —Ö–æ–ª–±–æ–≥–¥–æ—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞.</p>`;
        }
    }
    

    initializeProduct(prod) {
        this.id = prod.prod_id;
        this.name = prod.prod_name;
        this.code = prod.prod_code;
        this.type = prod.prod_type;
        this.animal = prod.prod_animal;
        this.size = prod.prod_size;
        this.color = Array.isArray(prod.colors) 
        ? prod.colors.map(color => color) 
        : ["–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π"];
        this.origin = prod.origin;
        this.certification = prod.certification;
        this.subpic = prod.subpic;
        this.startDate = prod.start_date;
        this.endDate = prod.end_date;
        this.piece = prod.piece;
        this.price = prod.price;
        this.number = 1;
        this.render(); // –î—ç–ª–≥—ç—Ü –¥—ç—ç—Ä —Ö–∞—Ä—É—É–ª–∞—Ö
        this.setupAddToCartButton(); // "–°–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Ö" —Ç–æ–≤—á–∏–π–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    }

    render() {
        this.innerHTML = `
            <div class="container">
                <div id="mainpicture">
                    <img class="big" src="${this.subpic}" alt="Main Product Image">
                </div>
                <article>
                    <h2 id="title">${this.name}</h2>
                    <pre>${this.type}</pre>
                    <pre>–•—ç–º–∂—ç—ç: ${this.size} </pre>
                    <aside class="songolt">
                        <pre>”®–Ω–≥”©</pre>
                        <form>
                            ${this.color.map((color, index) => `
                                <input type="radio" name="choice_color" id="color${index + 1}" ${index === 0 ? 'checked' : ''}>
                                <label for="color${index + 1}">${color}</label>
                            `).join('')}
                        </form>
                    </aside>
                    <p id="uildverlesen">“Æ–π–ª–¥–≤—ç—Ä–ª—ç–≥–¥—Å—ç–Ω –æ–≥–Ω–æ–æ: ${this.startDate}</p>
                    <p id="expire">–î—É—É—Å–∞—Ö –æ–≥–Ω–æ–æ: ${this.endDate}</p>
                    <p id="origin">–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π –≥–∞—Ä–∞–ª: ${this.origin}</p>
                    <p id="standart">–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç: ${this.certification}</p>
                    <span id="currency">${this.price}‚ÇÆ</span>
                    <br>
                    <button id="cart-button">üõí–°–∞–≥—Å–∞–Ω–¥ –Ω—ç–º—ç—Öüõí</button>
                </article>
            </div>`;
    }

    setupAddToCartButton() {
        const cartButton = this.querySelector('#cart-button');
        cartButton.addEventListener('click', () => {
            const colorElement = this.querySelector('input[name="choice_color"]:checked');
            if (!colorElement) {
                alert("–•—ç–º–∂—ç—ç —ç—Å–≤—ç–ª ”©–Ω–≥”©”© —Å–æ–Ω–≥–æ–Ω–æ —É—É.");
                return;
            }

            const productData = {
                id: this.id,
                name: this.name,
                size: this.size,
                color: colorElement.nextElementSibling.textContent,
                price: this.price,
                image: this.subpic,
                number: this.number
            };

            const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
            cartItems.push(productData);
            localStorage.setItem('cart', JSON.stringify(cartItems));
            alert("–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —Å–∞–≥—Å–∞–Ω–¥ –Ω—ç–º–ª—ç—ç!");

            // –•—ç—Ä—ç–≤ 'my-cart' —ç—Å–≤—ç–ª 'app' —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–≥–¥—Å–æ–Ω –±–æ–ª –∞–∂–∏–ª–ª—É—É–ª–Ω–∞.
            if (document.getElementById("my-cart")) {
                document.getElementById("my-cart").addProduct(this.id);
            }
            if (typeof app !== 'undefined' && app.cart) {
                app.cart.addProduct(this.id);
                app.refreshCart();
            }
        });
    }

    connectedCallback() {
        const productId = this.getAttribute('product-id'); // –ê—Ç—Ä–∏–±—É—Ç–∞–∞—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π ID-–≥ –∞–≤–Ω–∞
        if (productId) {
            this.fetchProductData(productId); // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π ”©–≥”©–≥–¥–ª–∏–π–≥ —Ç–∞—Ç–∞–∂ –∞–≤–Ω–∞
        }
    }

}

window.customElements.define('main-product', MainProduct);
